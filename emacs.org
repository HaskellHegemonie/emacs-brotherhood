#+title: Emacs literate config
#+author: HaskellHegemonie
#+email: haskellisierer@proton.me
#+date: 2024-01-19
#+property: header-args:elisp :tangle emacs.el
#+exclude_tags: noexport
* Important
#+begin_src elisp
  (setq lexical-binding t)
  (require 'use-package)
  (setq emacs-config-location "/etc/nixos/config/emacs")
#+end_src
** Racketifizierung
#+begin_src elisp
  (defmacro define (id &rest args)
    (if (consp id)
        `(defun ,(car id) ,(cdr id) ,@args)
      `(setf  ,id ,@args)
      )
    )

  (defmacro λ (&rest body)
    (define (partition list keys &optional acc)
            (if list
                (let
                    ((head (car list)))
                  (if (member head keys)
                      `(,acc . ,(cdr list))
                    (partition (cdr list) keys (append acc (list head)))
                    )
                  )
              acc))
    (define (convlist x)
            (if (sequencep x)
                x
              (list x)))
    ;; real code
    (let*
        ((arrows `(→ ->))
         (res (partition body arrows))
         (args (car res))
         (body (cdr res)))
      `(lambda ,(convlist args) ,@body)))


  (defalias 'symbol->string 'symbol-name)
  (defalias 'string->symbol 'intern)
  (defalias 'number->string 'number-to-string)
  (defalias 'string->number 'string-to-number)
#+end_src
** Haskellisierung
#+begin_src elisp
  (define (id x)
          x)

  (define id (λ x → x))

  (define (succ x)
          (+ 1 x))
  (define (pred x)
          (- 1 x))

  ;; Haskellisierung
  (defalias 'elem 'member)
  (defalias 'filter 'cl-find-if-not) ;; doesn't work yet
  (defmacro foldr (function initial list)
    `(seq-reduce ,function ,list ,initial))

  ;; (filter (λ x → (= x 1)) (list 1 2 3 4 5 7 nil))

  (defmacro words (xs)
    `(string-join ,xs " "))
  (defmacro intercalate (x xs)
    `(string-join ,xs ,x))
  ;; (words `("It's" "nice" "to" "be" "a" "Preiss"))
  ;; (intercalate " " `("but" "it's" "higher" "to" "be" "a" "Bayer"))


  ;; string-split seems ok
  (defmacro splitOn  (seperators xs)
    `(string-split ,xs ,seperators))

  (defmacro chunksOf (size list)
    `(seq-partition ,list ,size))
#+end_src
** Schlechte Ideen
#+begin_src elisp
  (defmacro sh (&rest args)
    (let
        ((test
          (mapcar
           (λ a →
              (if (stringp a)
                  (format "\"%s\"" a)
                (format "%s" a)
                ))
           args)))
      `(shell-command-to-string ,(intercalate " " test))
      )
    )
  (defmacro sh+ (&rest args)
    `(splitOn "\n" (sh ,@args)))
  ;; (defmacro ⌷sh (index


  ;; Allows this syntax
  ;; (sh echo "hello")
  ;; (sh nix-instantiate --eval -E  "<nixpkgs>")
  ;; (define my-little-temp-dir (car (sh+ mktemp -d)))
  ;; you may use my-little-temp-dir as an ordinary string
  ;; (cd my-little-temp-dir)
  ;; (pwd)
  ;; (sh ls)
#+end_src
** ALL
#+begin_src elisp
  ;; A Lisp Language
  ;; Noch schlechtere Ideen als "Schlechte Ideen"


  (defmacro ⌷ (idx seq)
    `(cond
      ((not (listp ,seq)) nil)
      ((listp ',idx)
       (mapcar
        (λ i →
           (cl-nth-value i ,seq)
           )
        ',idx
        ))
      (t
       (cl-nth-value ,idx ,seq))
      ))


  (defmacro ⍳ (length &optional adder)
    `(cl-loop for x from 0 until ,length
              collect (+ x (or ,adder 0))))

  ;; (⌷ (0 9 2) (⍳ 10))
  ;; (⌷ (0 0 0 0 0 3 2 1 0) '("Bayern" "des" "samma" "mia"))

  (defalias '↑ 'take)
  (defalias '↓ 'drop)
  (defalias '⍪  'concat)
  ;; (↑ 3 (⍳ 5 6))
#+end_src
* Emacs
** Style
*** Overall                                                          :todo:
#+begin_src elisp
  (setq inhibit-startup-screen t)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (defun my-configure-init-frame (frame)
    (progn
      (keyboard-translate ?\C-t ?\C-x)
      (keyboard-translate ?\C-x ?\C-t)
      (set-frame-font "JetBrainsMonoNerdFont 10" nil nil)
      ))
  (add-hook 'after-make-frame-functions #'my-configure-init-frame)
#+end_src
*** Rainbow-delimiters
#+begin_src elisp
  (use-package rainbow-delimiters
    :init
    (rainbow-delimiters-mode)
    :config
    (rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
*** Icons
#+begin_src elisp
  (use-package all-the-icons)
#+end_src
*** Theme
#+begin_src elisp
  (use-package doom-themes
    :init
    (load-theme 'doom-one t))
#+end_src
*** Emoji
#+begin_src elisp
  (use-package emoji
  	:init
  	(setq emoji-keymap (make-sparse-keymap))
  	:bind*
  	(:map
  	 emoji-keymap
  	 ("s" . #'emoji-search)
  	 ("i" . #'emoji-insert)
  	 ("u" . #'insert-char)
  	 )
  	:bind-keymap*
  	("C-c e" . emoji-keymap)
  	)
#+end_src

** Config
*** Startup
#+begin_src elisp
  (use-package emacs
    :init
    ;; (global-display-line-numbers-mode)

    (display-time-mode 1)
    :hook
    (prog-mode . display-line-numbers-mode)
    (prog-mode . toggle-input-method)
    (prog-mode . hl-line-mode)

    (text-mode  . display-line-numbers-mode)
    (text-mode  . toggle-input-method)
    (text-mode  . hl-line-mode)

    :bind*
    (
     ;; ("C-x C-h" . #'switch-to-buffer) ;; oh yes
     ("C-x C-h" . #'consult-buffer)
  	 ("C-x C-r" . #'consult-register)
  	 ("C-c C-h" . #'consult-bookmark)
     ("C-M-e" . #'eshell)
     ("C-v" . #'universal-argument)
  	 ("C-c u" . #'universal-argument)
     )

    :config
    (define-key key-translation-map (kbd "M-t") [ersatz-meta-x])
    (global-set-key [ersatz-meta-x] 'execute-extended-command)

    :custom
    (make-backup-files nil)
    (tab-with 2)
    (indent-line-function 'noindent)
    ;; (display-line-numbers-type t)
    (blink-cursor-mode nil)
    (truncate-lines 1)
    (standard-indent 2)
    (tab-width 2)
    (c-tab-always-indent nil)
    (c-syntactic-indentation nil)
    (indent-tabs-mode t)
    (tab-width 2)
    (scroll-margin 8)
    ;; (display-line-numbers 'relative)
    (display-line-numbers-type 'relative)
    (eletric-indent-mode nil)
    (lexical-binding t)
    )
#+end_src

*** Registers
#+begin_src elisp
  (use-package register
  	:init
  	(setq register-keymap (make-sparse-keymap))
  	:bind-keymap*
  	(
  	 ("C-x r" . register-keymap)
  	 )
  	:bind*
  	(:map
  	 register-keymap
  	 ("p" . #'point-to-register)
  	 ("y" . #'copy-to-register)
  	 ("w" . #'window-configuration-to-register)
  	 ("f" . #'frameset-to-register)
  	 )
  	)
#+end_src

*** Bookmarks
#+begin_src elisp
  (use-package bookmark
  	:after
  	register
  	:bind*
  	(:map
  	 register-keymap
  	 ("s" . #'bookmark-set)
  	 ("d" . #'bookmark-delete)
  	 ("l" . #'bookmark-locate)
  	 ("b" . #'edit-bookmarks)
  	 ("n" . #'bookmark-rename)
  	 )
  )
#+end_src

*** Keychain
#+begin_src elisp
  (use-package keychain-environment
    :config
    (keychain-refresh-environment))
#+end_src
*** Encoding
#+begin_src elisp
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq x-select-type-request '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src
** Movement
*** Evil
#+begin_src elisp
  (use-package evil
  	:bind
  	(:map
  	 evil-normal-state-map
  	 ("C-e" . #'move-end-of-line)
  	 ("C-p" . #'previous-line)
  	 ("C-n" . #'next-line)
  	 ("C-y" . #'yank)
  	 ("M-y" . #'yank-pop)
  	 ("C-f" . #'forward-char)
  	 ("C-b" . #'backward-char)
     ("M-n" . #'evil-scroll-down)
     ("M-p" . #'evil-scroll-up)
  	 )
  	(:map
  	 evil-insert-state-map
     ("M-n" . #'evil-scroll-down)
     ("M-p" . #'evil-scroll-up)
     ("C-g" . #'evil-normal-state)
     ("TAB" . #'tab-to-tab-stop)
     ("C-e" . #'move-end-of-line)
     ("C-f" . #'forward-char)
     ("C-b" . #'backward-char)
     ("C-y" . #'yank)
     ("M-y" . #'yank-pop)
  	 )
  	(:map
  	 evil-window-map
  	 ("M-q" . #'kill-buffer-and-window)
  	 )
    :bind*
  	(
  	 ;; ("C-c C-h" . #'mode-line-other-buffer)
  	 ("C-M-v" . #'evil-visual-block)
  	 )
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-want-C-g-bindings nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-d-scroll t)
    (evil-want-C-h-delete nil)
  	(evil-want-C-w-delete nil)
  	(evil-want-C-w-in-emacs-state t)
  	:config
  	(evil-mode 1)
  	(setopt
  	 evil-insert-state-cursor 'box)
  	(global-set-key (kbd "M-p") 'evil-scroll-up)
  	(global-set-key (kbd "M-n") 'evil-scroll-down)
  	(global-set-key (kbd "C-^") 'evil-buffer)
  	(dolist
  			(mode
  			 '(eshell-mode
  				 shell-mode
  				 comint-mode

  				 Info-mode
  				 Man-mode

  				 ediff-mode

           gnus-summary-mode
           gnus-group-mode
           gnus-server-mode
           ))
  		(evil-set-initial-state mode 'emacs)
  		)
    )

#+end_src

*** Evil-Collection
#+begin_src elisp
  (use-package evil-collection
  	:after evil
  	:config
  	(evil-collection-init)
  	)
#+end_src
*** Popper
#+begin_src elisp
  (use-package popper
    :ensure t ; or :straight t
    :bind (("C-`"   . popper-toggle)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
#+end_src
** Info
#+begin_src elisp
  (use-package info
    :bind
    ("C-d" . #'evil-scroll-down)
    ("C-u" . #'evil-scroll-up)
    ;; ("j"   . #'evil-next-line)
    ;; ("k"   . #'evil-previous-line)
    )
#+end_src
** Completion                                                         :todo:
*** Vertico et al.
#+begin_src elisp
  (use-package vertico
  	:config
  	(vertico-mode 1))

  (use-package marginalia
    :config
    (marginalia-mode 1))

  (use-package orderless
    :custom
    (orderless-matching-styles '(orderless-regexp))
    (completion-styles '(orderless basic)))
#+end_src
*** Consult
#+begin_src elisp
  (use-package consult
  	:after evil
  	:init
  	(setq consult-keymap (make-sparse-keymap))
  	:bind*
  	(:map
  	 consult-keymap
  	 ("C-s" . #'isearch-forward)
  	 ("C-r" . #'isearch-backward)
     ("C-l" . #'consult-goto-line)
     ("C-f" . #'consult-find)
  	 ("C-r" . #'consult-ripgrep)
     ("C-h" . #'consult-line)
     ("C-o" . #'consult-org-heading)
     ("C-a" . #'consult-org-agenda)
  	 ("C-i" . #'consult-imenu)
  	 ("C-k" . #'consult-imenu-multi)
  	 ("C-v" . #'consult-git-grep)
  	 ("C-y" . #'consult-yank-from-kill-ring)
  	 )
  	:bind-keymap*
  	(
  	 ("C-s" . consult-keymap)
  	 )
  	)
#+end_src

*** Embark
#+begin_src elisp
  (use-package embark
  	:bind*
  	(
  	 ("C-." . #'embark-act)
  	 ("C-;" . #'embark-dwim)
  	 ("C-h b" . #'describe-bindings)
  	 ("C-h B" . #'embark-bindings)
  	 )
  	(:map
  	 evil-normal-state-map
  	 ("C-." . #'embark-act)
  	 )
  	)
#+end_src

*** Embark + Consult
#+begin_src elisp
  (use-package embark-consult
  	:hook
  	(embark-collect-mode . consult-preview-at-point-mode)
  	)
#+end_src

*** Corfu
#+begin_src elisp
  (use-package corfu
    :init
    (global-corfu-mode)
    )
#+end_src
*** Dabbrev
#+begin_src elisp
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src
** Grep
#+begin_src elisp
  (use-package rg
  	:after net-utils
    :bind*
    (:map
  	 net-utils-keymap
  	 ("r"  . #'rg)
  	 )
  	)
#+end_src
** EPA/EGP
#+begin_src elisp
  (use-package epa
  	:bind*
  	(:map
  	 global-map
  	 ("C-c k k" . #'epa-list-keys)
  	 ("C-c k K" . #'epa-list-keys)
  	 ("C-c k e" . #'epa-encrypt-region)
  	 ("C-c k d" . #'epa-decrypt-region)
  	 ("C-c k s" . #'epa-sign-region)
  	 ("C-c k v" . #'epa-verify-region)
  	 ("C-c k E" . #'epa-decrypt-file)
  	 ("C-c k D" . #'epa-decrypt-file)
  	 ("C-c k S" . #'epa-sign-file)
  	 ("C-c k V" . #'epa-verify-file)
  	 )
  	(:map
  	 epa-key-list-mode-map
  	 ("C-m" . #'epa-show-key)
  	 ("RET" . #'epa-show-key)
  	 ("M-RET" . #'epa-show-key)
  	 )
  	:custom
  	(epa-keys-select-method 'minibuffer)
  	)

  (use-package epg
    :custom
    (epg-pinentry-mode 'loopback)
    )
#+end_src
** Eshell
#+begin_src elisp
  (use-package eshell
    :custom
    (eshell-aliases-file (concat emacs-config-location "/eshell-aliases"))
    )
#+end_src
** Projectile
#+begin_src elisp
  (use-package project
  	:bind
  	(:map
  	 project-prefix-map
  	 ("C-x p r"
  		. (lambda ()
  				(interactive)
  				(project-recompile)
  				(delete-window)
  				))
  	 )
  	:bind-keymap*
  	(
  	 ("C-c p" . project-prefix-map)
  	 )
  	)
#+end_src
* System
** Nix                                                                  :FP:
#+begin_src elisp
  (use-package nix-mode
    :bind
    (("C-M-n" . #'nix-repl))
    )
#+end_src
* Extra
** Org
#+begin_src elisp
  (require 'org)
  (use-package org
  	:init
  	(defun hsheg/tangle-save-in-org ()
  		(when
  				(string= (file-name-extension (buffer-file-name (current-buffer))) "org")
  			(org-babel-tangle)
  			))
  	(defun char-to-hex (char)
  		(interactive "cEnter char: ")
  		(format "%x" char)
  		)
  	:hook
  	(org-mode . org-indent-mode)
  	(org-mode . org-num-mode)
  	(after-save . hsheg/tangle-save-in-org)
  	:config
  	(add-to-list 'org-modules 'org-tempo t)
  	:custom
  	(org-imenu-depth 5)
  	(org-list-allow-alphabetical t)
  	;; (org-directory "~/orgRoam/agenda")
  	(org-agenda-span 14)
  	(org-agenda-files nil) ;; can also set with =C-c [= per project
  	(org-confirm-babel-evaluate nil)
  	(org-src-window-setup 'split-window-below)
  	(org-todo-keywords
  	 `(
  		 (sequence "TODO(t)" "DONE(d)")
  		 (sequence "IN-PROGRESS(p)" "FIXED(f)" "KILLED(k)")
  		 (sequence "LAZY(l)")
  		 ))
  	(org-babel-load-languages
  	 '((emacs-lisp . t)
  		 (haskell . t)
  		 (rust . t)
  		 (python . t)
  		 (julia . t)
  		 (C . t)
  		 (ledger . t)
  		 ))
  	(setf (cdr (assoc 'output-pdf TeX-view-program-selection)) '("Zathura"))

    (org-structure-template-alist
     '(("a" . "export agda2")
       ("c" . "center")
       ("C" . "comment")
       ("e" . "src elisp")
       ("h" . "src haskell")
       ("n" . "src nix")
       ("g" . "src scheme")
       ("r" . "src rust")
  		 ("j" . "src julia")
  		 ("p" . "src python")
       ("l" . "src ledger")
       ("L" . "export latex")
       ("t" . "export typst")
       ("E" . "export")
       ("q" . "quote")
       ("s" . "src")
       ("v" . "verse"))
     )
  	(org-tempo-keywords-alist
  	 '(
  		 ;; ("L" . "latex")
  		 ("H" . "html")
  		 ("A" . "ascii")
  		 ("i" . "index")

  		 ("ot" . "title")
  		 ("oa" . "author")
  		 ("om" . "email")
  		 ("od" . "date")
  		 ("oo" . "options")
  		 ("ol" . "language")
  		 ("oe" . "exclude_tags")
  		 ("os" . "subtitle")
  		 ("osf" . "setupfile")
  		 ("op" . "property")
  		 ("on" . "name")
  		 ("oh" . "header")
  		 ("oc" . "call")

  		 ("ok" . "keywords")
  		 ("oal" . "article_link")

  		 ;; ("lc" . "latex_class")
  		 ("lh" . "latex_header")


  		 ("tt" . "typst")
  		 )
  	 )
    :bind*
    (
     ("C-c o l" . #'org-store-link)
     ("C-c o a" . #'org-agenda)
     ("C-c o c" . #'org-capture) ;; recommended [[https://orgmode.org/manual/Activation.html][1.3]] at  of the org manual

     ("C-c o y" . #'org-insert-link)
     ("C-c o o" . #'org-open-at-point)
     ("C-c o >" . #'org-goto-calendar)
     ("C-c o <" . #'org-date-from-calendar)
     ("C-c o s" . #'org-schedule)
     ("C-c o d" . #'org-deadline)

     ("C-c o !" . #'org-time-stamp-inactive)
     ("C-c o ," . #'org-timer-pause-or-continue)
     ("C-c o ." . #'org-time-stamp)
     ("C-c o ;" . #'org-timer-set-timer)
     ("C-c o _" . #'org-timer-stop)
     ("C-c o 0" . #'org-timer-start)


     ("C-c C-o C-p" . #'org-set-property)
  	 ("C-c C-o C-n" . #'org-delete-property)
     ("C-c C-o C-d" . #'org-insert-drawer)
     )
    (:map
     org-mode-map
  	 ("C-c C-r" . #'org-typst-export-to-pdf)
     ("M-l" . #'org-metaright)
     ("M-h" . #'org-metaleft)
     ("M-j" . #'org-metadown)
     ("M-k" . #'org-metaup)

  	 ("C-c t" . #'org-todo)
  	 ("C-,"   . #'org-cycle)
     )
    )
#+end_src

** ERC
#+begin_src elisp
  (use-package erc
    :custom
    (erc-prompt (lambda () (concat "[" (buffer-name) "]")))
    (erc-server "irc.libera.chat")
    (erc-nick "hosklla'")
    ;; (erc-auto-query 'bury)
    (erc-fill-column 100)
    (erc-fill-function 'erc-fill-static)
    (erc-fill-static-center 20))
#+end_src
** gnus
#+begin_src elisp
  (use-package gnus
  	:hook
  	(gnus-group-mode . gnus-topic-mode)
  	:bind*
  	(
  	 ("C-c C-m" . #'gnus)
  	 )
  	(
  	 :map
  	 gnus-article-mode-map
  	 ("C-j" . #'gnus-summary-next-article)
  	 ("C-k" . #'gnus-summary-prev-article)
  	 )
  	(:map
  	 gnus-summary-mode-map
  	 ("C-d" . #'evil-scroll-down)
  	 )

  	:config
  	(setq gnus-secondary-select-methods
  				'(
  					(nntp "news.gwene.org")
  					)
  				)
  	:custom
  	(gnus-select-method '(nnnil ""))
  	(gnus-read-newsrc-file nil)
  	(gnus-save-newsrc-file nil)
  	(gnus-save-killed-list nil)
  	(gnus-startup-file (concat emacs-config-location "/newsrc"))
  	(gnus-use-full-window nil)

  	(gnus-use-cross-reference nil)
  	(gnus-asynchronous t)
  	(gnus-auto-select-first nil)
  	(mm-inline-large-images nil)
  	(mm-discouraged-alternatives '("image/.*"))
  	(shr-blocked-images ".*")
  	(shr-allowed-images "")
  	(shr-inhibit-images t)
  	)
#+end_src

** Ediff
#+begin_src elisp
  (use-package ediff
  	:init
  	(setq ediff-keymap (make-sparse-keymap))
  	:bind*
  	(:map
  	 ediff-keymap
  	 ("r" . #'ediff-show-registry)
  	 ;; ("b" . #'ediff-backup)

  	 ("f" . #'ediff-files)
  	 ("F" . #'ediff-files3)

  	 ("b" . #'ediff-buffers)
  	 ("B" . #'ediff-buffers3)

  	 ("d" . #'ediff-directories)
  	 ("D" . #'ediff-directories3)

  	 ("g" . #'ediff-revision)

  	 ("w" . #'ediff-windows-wordwise)
  	 ("W" . #'ediff-windows-linewise)

  	 ;; ("w" . #'ediff-region-wordwise)
  	 ;; ("W" . #'ediff-region-linewise)
  	 ("p" . #'ediff-patch-buffer)
  	 ("P" . #'ediff-patch-file)
  	 )
  	:bind-keymap*
  	(
  	 ("C-c d" . ediff-keymap)
  	 )
  	)

#+end_src
** Ement
#+begin_src elisp
  (use-package ement)
#+end_src
** net-utils
#+begin_src elisp
  (use-package net-utils
  	:init
  	(setq net-utils-keymap (make-sparse-keymap))
  	:custom
  	(netstat-program "ss")
  	;; (netstat-program-options '("-tunlp"))
  	(ifconfig-program "ip")
  	(ifconfig-program-options '("a"))

    :bind*
    (:map
  	 net-utils-keymap
     ("c" . proced)
     ("n" . netstat)
     ("p" . ping)
     ("i" . ifconfig)
     ("l" . nslookup-host)
     ("d" . dig)
     ("s" . smbclient)
     ("f" . finger)
     ("w" . whois)
     )
  	:bind-keymap*
  	(
  	 ("C-c n" . net-utils-keymap)
  	 )
    )
#+end_src
** External Browser
#+begin_src elisp
  (use-package browse-url
  	:custom
  	(browse-url-firefox-program "firefox")
  	(browse-url-browser-function #'browse-url-firefox)
  	(browse-url-firefox-arguments '("-private-window"))
  	)
#+end_src
** Ledger
#+begin_src elisp
  (use-package ledger-mode
  	)
#+end_src
* Dev
** Magit
#+begin_src elisp
  (use-package magit
  	:bind*
  	(
  	 ;; getting to the magit status buffer is C-x g by default
  	 ("C-c g" . #'magit-file-dispatch)
  	 ("C-c C-d" . #'magit-dispatch)
  	 )
  	(:map
  	 magit-mode-map
  	 ("C-n" . #'magit-section-forward)
  	 ("C-p" . #'magit-section-backward)
  	 )

  	:config
  	(setq transient-default-level 7)

    (setq magit-refresh-status-buffer nil)
    (setq auto-revert-buffer-list-filter 'magit-auto-revert-repository-buffer-p)
    (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
    (remove-hook 'server-switch-hook 'magit-commit-diff)
    (remove-hook 'with-editor-filter-visit-hook 'magit-commit-diff)
    (remove-hook 'magit-status-headers-hook 'magit-insert-tags-headers)
    (setq magit-diff-highlight-indentation t
          magit-diff-highlight-trailing t
          magit-diff-paint-whitespace t
          magit-diff-highlight-hunk-body t
          magit-diff-refine-hunk t)

    ;; No significant improvement for me
    ;; (remove-hook 'magit-status-headers-hook 'magit-insert-tags-header)
    ;; (remove-hook 'magit-status-headers-hook 'magit-insert-status-headers)
    ;; (remove-hook 'magit-status-headers-hook 'magit-insert-unpushed-to-pushremote)
    ;; (remove-hook 'magit-status-headers-hook 'magit-insert-unpushed-to-upstream-or-recent)
    ;; (remove-hook 'magit-status-headers-hook 'magit-insert-unpulled-from-upstream)
    ;; (remove-hook 'magit-status-headers-hook 'magit-insert-unpulled-from-pushremote)
    )
#+end_src
** forge
#+begin_src elisp
  (use-package forge
    :after magit
    :config
    ;; (setq auth-sources '("~/.authinfo.gpg"))
    (setq auth-sources nil)
  	)
#+end_src
** git-timemachine                                                    :todo:
#+begin_src elisp
  ;; weird evil-collection keybinds
  (use-package git-timemachine)
#+end_src
** diff-hl
#+begin_src elisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode))
#+end_src

** Eglot                                                          :lsp:todo:
#+begin_src elisp
  (use-package eglot
  	:init
  	(defvar eglot-keymap (make-sparse-keymap))
  	(bind-keys
  	 :map eglot-keymap
  	 ("a" . #'eglot-code-actions)
  	 ("r" . #'eglot-rename)
  	 ("i" . #'eglot-find-imlementation)
  	 ("t" . #'eglot-find-typeDefinition)
  	 ("d" . #'eglot-find-declaration)
  	 ("f" . #'eglot-format)
  	 )
  	:bind
  	(
  	 ("M-j" . flymake-goto-next-error)
  	 ("M-k" . flymake-goto-prev-error)
  	 )
  	:bind-keymap*
  	(
  	 ("C-l" . eglot-keymap)
  	 )
  	;; :hook
  	;; (haskell-mode . eglot-ensure)
  	;; (prog-mode . eglot-ensure)
  	:custom
  	(eldoc-echo-area-use-multiline-p nil)
  	(eglot-autoshutdown t)
  	;; (eglot-workspace-configuration
  	;;  '((haskell (plugin (stan (globalOn . :json-false))))))
  	)
#+end_src
** Vterm
#+begin_src elisp
  (use-package vterm)
  (use-package multi-vterm
    :config
    :bind
    (
  	 ("C-c l" . #'multi-vterm-next)
     ("C-c h" . #'multi-vterm-prev)
     ("C-c v" . #'multi-vterm)
  	 )
  	)
#+end_src
* Modes
** Dap                                                            :lsp:todo:
#+begin_src elisp
  (use-package dap-mode)
#+end_src
** Haskell                                                              :FP:
#+begin_src elisp
  (use-package haskell-mode
    :config
    (setq haskell-interactive-popup-errors nil)
    (add-hook 'haskell-cabal-mode #'electric-indent-mode))
#+end_src
** Agda2
#+begin_src elisp
  (load-file (let ((coding-system-for-read 'utf-8))
  						 (shell-command-to-string "agda-mode locate")))
  (setq default-input-method "Agda")

  (use-package agda2-mode

    :custom
    (agda-input-user-translations
     ;; ⌈ ⌊?
     `(
  		 ("gl"  . ("\\"))
  		 ("f"   . ("dif")) ;; ← ugly workaround
       ("ff"  . ("∂"))

  		 ("Gp" . ("π"))
  		 ("GP" . ("Π"))
  		 ("Gphh". ("φ"))

  		 ("Gph" . ("φ"))
  		 ("GPH" . ("Φ"))

  		 ("Gps" . ("ψ"))
  		 ("GPS" . ("Ψ"))
  		 ("Gou" . ("ο"))

  		 ("Gko" . ("ϟ"))
  		 ("GKO" . ("Ϟ"))


       ("GNA" . ("∇"))
       ("Gr"  . ("ρ" "⍴"))
       ("Gi"  . ("ι" "⍳"))
       ("Gi_" . ("⍸"))
       ("Ge"  . ("ε" "∊"))
       ("Ge=" . ("⍷"))
       ("Ga"  . ("α" "⍺"))
       ("Gaa" . ("⍺⍺"))
       ("Go"  . ("ω" "⍵"))
       ("Goo" . ("⍵⍵"))
       ("o\"" . ("⍤"))
       ("O\"" . ("⍥"))
       ("o."  . ("∘."))
       ("*\"" . ("⍣"))
       ("o_"  . ("⍛"))
       ("ol"  . ("⍉"))
       ("op"  . ("⌽"))
       ("on"  . ("⊖"))

       ("xx"  . ("×"))
       ("x*"  . ("×"))
       ("x#"  . ("⍒"))
       ("xl"  . ("⎕"))
       ("xe"  . ("⍟"))
       ("xo"  . ("○"))
       ("xc"  . ("⍝"))
       ("xu"  . ("⍋"))
       ("xd"  . ("⍒"))
       ("xb"  . ("⍎"))
       ("xt"  . ("⍕"))
       ("xS"  . ("⍀"))
       ("xz"  . ("⍪"))
       ("x\"" . ("¨"))
       ("x~"  . ("⍨"))
       ("x;"  . ("⋄"))
       ("x!"  . ("⌷"))
       ("x0"  . ("⍬"))

       ("x,"  . ("⊂"))
       ("x."  . ("⊃"))
  		 ("["   . ("⊏"))
  		 ("]"   . ("⊐"))
       ("x,=" . ("⊆"))
  		 ("x.=" . ("⊇"))
  		 ("[="  . ("⊑"))
  		 ("]="  . ("⊒"))
  		 ("v"   . ("∨"))
  		 ("w"   . ("∧"))
       ("xw"  . ("∩"))
       ("xv"  . ("∪"))
       ("[w"  . ("⊓"))
       ("[v"  . ("⊔"))
       ("xW"  . ("⋂"))
       ("xV"  . ("⋃"))

       ("xw~" . ("⍲"))
       ("xv~" . ("⍱"))
       ("xr"  . ("÷"))
       ("xR"  . ("⌹"))
       ("xn"  . ("¯"))
       ("x/"  . ("⌿"))
       ("x="  . ("⌸"))
       ("x'"  . ("⍞"))
       ("xs"  . ("⌺"))

  		 ("\"'" . ("„"))
  		 ("\"q" . ("“"))
  		 ("''"  . ("‘"))
  		 ("'q"  . ("’"))
  		 ("tl"  . ("◃"))
  		 ("tr"  . ("▹"))
  		 ("ket" . ("⟩"))
  		 ("-"   . ("∖"))
  		 ("W"   . ("⋀"))
  		 ("V"   . ("⋁"))
  		 ("."   . ("∴"))
  		 ("."   . ("∴"))
  		 ("e"   . ("∵"))
  		 ("deg" . ("°"))
  		 ("*"   . ("·"))
  		 ("h."  . ("…"))
       ))
    )
  ;; (defvar gnu-apl--symbols '(;; Top row
  ;;                            ;; `
  ;;                            ("diamond" "◊" "`")
  ;;                            ;; 1
  ;;                            ("diaeresis" "¨" "1")
  ;;                            ("i-beam" "⌶" "!")
  ;;                            ;; 2
  ;;                            ("macron" "¯" "2")
  ;;                            ("del-tilde" "⍫" "@")
  ;;                            ;; 3
  ;;                            ("less-than" "<" "3")
  ;;                            ("del-stile" "⍒" "#")
  ;;                            ;; 4
  ;;                            ("less-than-or-equal-to" "≤" "4")
  ;;                            ("delta-stile" "⍋" "$")
  ;;                            ;; 5
  ;;                            ("equals" "=" "5")
  ;;                            ("circle-stile" "⌽" "%")
  ;;                            ;; 6
  ;;                            ("greater-than-or-equal-to" "≥" "6")
  ;;                            ("circle-backslash" "⍉" "^")
  ;;                            ;; 7
  ;;                            ("greater-than" ">" "7")
  ;;                            ("circled-minus" "⊖" "&")
  ;;                            ;; 8
  ;;                            ("not-equal-to" "≠" "8")
  ;;                            ("circle-star" "⍟" "*")
  ;;                            ;; 9
  ;;                            ("logical-or" "∨" "9")
  ;;                            ("down-caret-tilde" "⍱" "(")
  ;;                            ;; 0
  ;;                            ("logical-and" "∧" "0")
  ;;                            ("up-caret-tilde" "⍲" ")")
  ;;                            ;; -
  ;;                            ("multiplication-sign" "×" "-")
  ;;                            ("exclamation-mark" "!" "_")
  ;;                            ;; =
  ;;                            ("division-sign" "÷" "=")
  ;;                            ("quad-divide" "⌹" "+")

  ;;                            ;; First row
  ;;                            ;; q
  ;;                            ("question-mark" "?" "q")
  ;;                            ;; w
  ;;                            ("omega" "⍵" "w")
  ;;                            ("omega-underbar" "⍹" "W")
  ;;                            ;; e
  ;;                            ("epsilon" "∊" "e")
  ;;                            ("epsilon-underbar" "⍷" "E")
  ;;                            ;; r
  ;;                            ("rho" "⍴" "r")
  ;;                            ;; t
  ;;                            ("tilde" "∼" "t")
  ;;                            ("tilde-diaeresis" "⍨" "T")
  ;;                            ;; y
  ;;                            ("uparrow" "↑" "y")
  ;;                            ("yen-sign" "¥" "Y")
  ;;                            ;; u
  ;;                            ("downarrow" "↓" "u")
  ;;                            ;; i
  ;;                            ("iota" "⍳" "i")
  ;;                            ("iota-underbar" "⍸" "I")
  ;;                            ;; o
  ;;                            ("circle" "○" "o")
  ;;                            ("circle-diaeresis" "⍥" "O")
  ;;                            ;; p
  ;;                            ("star-operator" "⋆" "p")
  ;;                            ("star-diaeresis" "⍣" "P")
  ;;                            ;; [
  ;;                            ("leftarrow" "←" "[")
  ;;                            ("quote-quad" "⍞" "{")
  ;;                            ;; ]
  ;;                            ("rightarrow" "→" "]")
  ;;                            ("zilde" "⍬" "}")
  ;;                            ;; \
  ;;                            ("right-tack" "⊢" "\\")
  ;;                            ("left-tack" "⊣" "|")

  ;;                            ;; Second row
  ;;                            ;; a
  ;;                            ("alpha" "⍺" "a")
  ;;                            ("alpha-underbar" "⍶" "A")
  ;;                            ;; s
  ;;                            ("left-ceiling" "⌈" "s")
  ;;                            ;; d
  ;;                            ("left-floor" "⌊" "d")
  ;;                            ;; f
  ;;                            ("underscore" "_" "f")
  ;;                            ("del-tilde" "⍫" "F")
  ;;                            ;; g
  ;;                            ("nabla" "∇" "g")
  ;;                            ;; h
  ;;                            ("increment" "∆" "h")
  ;;                            ("delta-underbar" "⍙" "H")
  ;;                            ;; j
  ;;                            ("ring-operator" "∘" "j")
  ;;                            ("jot-diaeresis" "⍤" "J")
  ;;                            ;; k
  ;;                            ("apostrophe" "'" "k")
  ;;                            ("quad-diamond" "⌺" "K")
  ;;                            ;; l
  ;;                            ("quad" "⎕" "l")
  ;;                            ("squish-quad" "⌷" "L")
  ;;                            ;; ;
  ;;                            ("down-tack-jot" "⍎" ";")
  ;;                            ("identical-to" "≡" ":")
  ;;                            ;; '
  ;;                            ("up-tack-jot" "⍕" "'")
  ;;                            ("not-identical-to" "≢" "\"")

  ;;                            ;; Third row
  ;;                            ;; z
  ;;                            ("subset-of" "⊂" "z")
  ;;                            ;; x
  ;;                            ("superset-of" "⊃" "x")
  ;;                            ("greek-letter-chi" "χ" "X")
  ;;                            ;; c
  ;;                            ("intersection" "∩" "c")
  ;;                            ("left-shoe-stile" "⍧" "C")
  ;;                            ;; v
  ;;                            ("union" "∪" "v")
  ;;                            ;; b
  ;;                            ("up-tack" "⊥" "b")
  ;;                            ("pound-sign" "£" "B")
  ;;                            ;; n
  ;;                            ("down-tack" "⊤" "n")
  ;;                            ;; m
  ;;                            ("divides" "|" "m")
  ;;                            ;; ,
  ;;                            ("shoe-jot" "⍝" ",")
  ;;                            ("comma-bar" "⍪" "<")
  ;;                            ;; .
  ;;                            ("backslash-bar" "⍀" ">")
  ;;                            ;; /
  ;;                            ("slash-bar" "⌿" "/")
  ;;                            ("quad-colon" "⍠" "?")

  ;;                            ;; Extras
  ;;                            ("pi" "π")
  ;;                            ("root" "√")
  ;;                            ("inverted-exclamation-mark" "¡")
  ;;                            ("quad-backslash" "⍂")
  ;;                            ("inverted-question-mark" "¿")
  ;;                            ))
#+end_src

#+begin_src elisp
  (use-package gnu-apl-mode
    :bind*
    (:map gnu-apl-mode-map
  				("C-c C-l" . (lambda
  											 ()
  											 (interactive)
  											 (let
  													 (
  														(compile-command
  														 (or
  															(cdr
  															 (assoc
  																'compile-command
  																file-local-variables-alist))
  															(format
  															 "dyalogscript %s"
  															 (file-name-nondirectory
  																(buffer-file-name
  																 (current-buffer))))))
  														)
  												 (recompile)
  												 (delete-window)))
  				 )
  				)
    :config
    (define (apl-gen-header)
            (interactive)
            (let*
                ((bfname (buffer-file-name (current-buffer)))
                 (curPoint (point))
                 (str
                  (⍪
                   "⍝ " "-*- compile-command: \"dyalogscript "
                   (file-name-base bfname)
                   "."
                   (file-name-extension bfname)
                   "\"; -*-\n"
                   )
                  )
                 )
              (goto-char (point-min))
              (insert str)
              (hack-local-variables)
              (goto-char (+ curPoint (length str)))
              ))
    )
#+end_src
** Rust
#+begin_src elisp
  (use-package rust-mode
    :hook
    (rust-mode . (lambda
                   ()
                   (setq indent-tabs-mode nil)))
    :bind*
    (:map rust-mode-map
          ("C-c C-l" . (lambda ()
                         (interactive)
                         (setq-local compile-command "cargo run")
                         (recompile)
                         (delete-window)
                         ))
          ("C-c C-c C-x" . (lambda ()
  													 (interactive)
  													 (setq-local compile-command "cargo test")
  													 (recompile)
  													 (delete-window)
  													 ))
          ("C-c C-c C-u" . (lambda ()
  													 (interactive)
  													 (setq-local compile-command "cargo check")
  													 (recompile)
  													 (delete-window)
  													 ))
          ("C-r C-h" . (lambda (documentation)
                         (interactive "sSearch for: ")
                         (shell-command (concat "rustup doc" documentation))
                         ))

          )
    )
#+end_src
** Rustic
#+begin_src elisp
  (use-package rustic
  	:config
  	(rustic-doc-mode)
  	:custom
  	(rustic-format-on-save t)
  	(rustic-babel-display-error-popup t)
  	(rustic-babel-display-compilation-buffer nil)
  	(rustic-babel-format-src-block nil)
  	(rustic-display-spinner nil)
  	(rustic-compile-display-method 'ignore)
  	:bind*
  	(
  	 :map
  	 rustic-mode-map
  	 (
  		("C-c C-r" . #'rustic-cargo-run)
  		)
  	 )
  	)
#+end_src

** Julia
#+begin_src elisp
  (use-package julia-repl
  	:bind*
  	(:map
  	 julia-repl-mode-map
  	 ("C-c C-r" . #'julia-repl-send-buffer)
  	 ("C-c C-l" . #'julia-repl-send-line)
  	 )
  )
#+end_src

** SB CL
#+begin_src elisp
  (require 'sly-autoloads)
  (use-package sly
    :custom
    (inferior-lisp-program "/run/current-system/sw/bin/sbcl")
    :bind
    (("C-c C-s C-n" . #'sly-stickers-next-sticker)
     ("C-c C-s C-p" . #'sly-stickers-prev-sticker)
     ("C-c C-s C-h" . #'sly-stickers-replay-prev)
     ("C-c C-s C-l" . #'sly-stickers-replay-next)
     ("C-c C-s C-j" . #'sly-stickers-replay-jump)
     )
    )

  (use-package sly-asdf)
#+end_src
** Typst
#+begin_src elisp
  (use-package typst-ts-mode
  	:config
  	(defalias 'typst-mode 'typst-ts-mode)
  	;; :bind*
  	;; (:map
  	;;  typst-ts-mode-map
  	 ;; ("C-c
  	)
#+end_src

#+begin_src elisp
  (use-package ox-typst
  	)
#+end_src

** LaTeX
#+begin_src elisp
#+end_src
* PDF
#+begin_src elisp
  (use-package pdf-tools
  	:hook
  	(pdf-view-mode . (lambda () (evil-collection-unimpaired-mode -1)))
  	(pdf-view-mode . (lambda () (evil-local-mode -1)))
  	(pdf-view-mode . (lambda () (diff-hl-mode -1)))
  	:config
  	(add-to-list 'revert-without-query ".pdf")
  	)
#+end_src
* FindFile + PDF + Images
#+begin_src elisp
  (use-package find-file
  	:config
  	(defun find-file-multimedia-advice (orig-fun &rest args)
  		(let*
  				(
  				 (rawFilename (car args))
  				 (filename (if (equal (substring rawFilename 0 1) "~") (concat (getenv "HOME") (substring rawFilename 1)) rawFilename))
  				 (extension (file-name-extension filename))
  				 (base (file-name-base filename))
  				 (bufname (format "%s.%s" base extension))
  				 (filename (format "\"%s\"" filename))
  				 )
  			(cond
  			 ((equal extension "pdf")
  				(async-shell-command (format "zathura %s" filename) bufname)
  				(delete-window (get-buffer-window bufname))
  				)
  			 ((or (equal extension "jpeg")
  						(equal extension "png"))
  				(async-shell-command (format "sxiv %s" filename) bufname)
  				(delete-window (get-buffer-window bufname))
  				)
  			 (t (apply orig-fun args))
  			 )
  			))
  	(advice-add 'find-file :around #'find-file-multimedia-advice)
  	(add-to-list 'org-file-apps `("pdf" . "zathura %s"))
  	(add-to-list 'org-file-apps `("png" . "sxiv %s"))
  	(add-to-list 'org-file-apps `("jpeg" . "sxiv %s"))
  	)
#+end_src
